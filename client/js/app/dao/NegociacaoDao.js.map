{"version":3,"sources":["../../app-es6/dao/NegociacaoDao.js"],"names":["Negociacao","NegociacaoDao","connection","_connection","_store","negociacao","Promise","resolve","reject","request","transaction","objectStore","add","onsuccess","e","onerror","console","log","target","error","cursor","openCursor","negociacoes","atual","result","dado","value","push","_data","_quantidade","_valor","continue","name","clear"],"mappings":";;;;;;;;;;;;;;;AAAQA,sB,qBAAAA,U;;;;;;;;;;;;;;;;;;;;;qCAEKC,a;AAET,uCAAYC,UAAZ,EAAwB;AAAA;;AAEpB,yBAAKC,WAAL,GAAmBD,UAAnB;AACA,yBAAKE,MAAL,GAAc,aAAd;AACH;;;;6CAEQC,U,EAAY;AAAA;;AAEjB,+BAAO,IAAIC,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;;AAExC;;;;;;AAMI,gCAAIC,UAAU,MAAKN,WAAL,CACbO,WADa,CACD,CAAC,MAAKN,MAAN,CADC,EACa,WADb,EAEbO,WAFa,CAED,MAAKP,MAFJ,EAGbQ,GAHa,CAGTP,UAHS,CAAd;;AAKAI,oCAAQI,SAAR,GAAoB,UAACC,CAAD,EAAO;AACvBP;AACH,6BAFD;;AAIAE,oCAAQM,OAAR,GAAkB,aAAK;AACnBC,wCAAQC,GAAR,CAAYH,EAAEI,MAAF,CAASC,KAArB;AACAX,uCAAO,yCAAP;AACH,6BAHD;AAIH,yBArBM,CAAP;AAsBH;;;iDAEY;AAAA;;AAET,+BAAO,IAAIF,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;;AAEpC,gCAAIY,SAAS,OAAKjB,WAAL,CACZO,WADY,CACA,CAAC,OAAKN,MAAN,CADA,EACc,WADd,EAEZO,WAFY,CAEA,OAAKP,MAFL,EAGZiB,UAHY,EAAb;;AAKI,gCAAIC,cAAc,EAAlB;;AAEAF,mCAAOP,SAAP,GAAmB,aAAK;AACpB,oCAAIU,QAAQT,EAAEI,MAAF,CAASM,MAArB;;AAEA,oCAAID,KAAJ,EAAW;;AAEP,wCAAIE,OAAOF,MAAMG,KAAjB;;AAEAJ,gDAAYK,IAAZ,CAAiB,IAAI3B,UAAJ,CAAeyB,KAAKG,KAApB,EAA2BH,KAAKI,WAAhC,EAA6CJ,KAAKK,MAAlD,CAAjB;AACAP,0CAAMQ,QAAN;AAEH,iCAPD,MAOO;AACH;AACA;AACAxB,4CAAQe,WAAR;AACH;AACJ,6BAfD;AAgBAF,mCAAOL,OAAP,GAAiB,aAAK;AAClBC,wCAAQC,GAAR,CAAY,WAAWH,EAAEI,MAAF,CAASC,KAAT,CAAea,IAAtC;AACAxB,uCAAO,wCAAP;AACH,6BAHD;AAIP,yBA7BM,CAAP;AA8BH;;;iDAEY;AAAA;;AAET,+BAAO,IAAIF,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;;AAEpC,gCAAIC,UAAU,OAAKN,WAAL,CACbO,WADa,CACD,CAAC,OAAKN,MAAN,CADC,EACa,WADb,EAEbO,WAFa,CAED,OAAKP,MAFJ,EAGb6B,KAHa,EAAd;;AAKAxB,oCAAQI,SAAR,GAAoB;AAAA,uCAAKN,QAAQ,kCAAR,CAAL;AAAA,6BAApB;;AAEAE,oCAAQM,OAAR,GAAkB,aAAK;AACnBC,wCAAQC,GAAR,CAAYH,EAAEI,MAAF,CAASC,KAArB;AACAX,uCAAO,wCAAP;AACH,6BAHD;AAIC,yBAbE,CAAP;AAcH","file":"NegociacaoDao.js","sourcesContent":["import {Negociacao} from '../models/Negociacao';\r\n\r\nexport class NegociacaoDao {\r\n\r\n    constructor(connection) {\r\n\r\n        this._connection = connection;\r\n        this._store = 'negociacoes';\r\n    }\r\n\r\n    adiciona(negociacao) {\r\n\r\n        return new Promise((resolve, reject) => {\r\n\r\n        /*  let transaction = this._connection.transaction([this._store], 'readwrite');\r\n            let store = transaction.objectStore(this._store);\r\n            let request = store.add(negociacao); \r\n            \r\n            podemos reduzir o request para add no banco para*/\r\n\r\n            let request = this._connection\r\n            .transaction([this._store],'readwrite')\r\n            .objectStore(this._store)\r\n            .add(negociacao);\r\n\r\n            request.onsuccess = (e) => {\r\n                resolve();\r\n            };\r\n\r\n            request.onerror = e => {\r\n                console.log(e.target.error);\r\n                reject('Não foi possível adicionar a negociação');\r\n            };                \r\n        });\r\n    }\r\n\r\n    listaTodos() {\r\n\r\n        return new Promise((resolve, reject) => {\r\n\r\n            let cursor = this._connection\r\n            .transaction([this._store],'readwrite')\r\n            .objectStore(this._store)\r\n            .openCursor();\r\n \r\n                let negociacoes = [];\r\n    \r\n                cursor.onsuccess = e => {\r\n                    let atual = e.target.result;\r\n    \r\n                    if (atual) {\r\n    \r\n                        let dado = atual.value;\r\n    \r\n                        negociacoes.push(new Negociacao(dado._data, dado._quantidade, dado._valor));\r\n                        atual.continue();\r\n    \r\n                    } else {\r\n                        // quando não há mais objects em nossa store.\r\n                        // Isso significa que já terminados de popular negociacoes\r\n                        resolve(negociacoes);\r\n                    }\r\n                };\r\n                cursor.onerror = e => {\r\n                    console.log('Error:' + e.target.error.name);\r\n                    reject(\"Não foi possivel listar as negociações\");\r\n                };\r\n        });\r\n    }\r\n\r\n    apagaTodos() {\r\n\r\n        return new Promise((resolve, reject) => {\r\n\r\n            let request = this._connection\r\n            .transaction([this._store],'readwrite')\r\n            .objectStore(this._store)\r\n            .clear();\r\n\r\n            request.onsuccess = e => resolve(\"Negociações apagadas com sucesso\");\r\n\r\n            request.onerror = e => {\r\n                console.log(e.target.error);\r\n                reject(\"Não foi possivel apagar as negociações\");\r\n            }\r\n            });\r\n    }\r\n\r\n}"]}